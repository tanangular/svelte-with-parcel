"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const path = require('path');

const _require = require('svelte/package.json'),
      version = _require.version;

const major_version = +version[0];

const _ref = major_version >= 3 ? require('svelte/compiler.js') : require('svelte'),
      compile = _ref.compile,
      preprocess = _ref.preprocess;

const _require2 = require('./parcel-adapter'),
      Asset = _require2.Asset;

const _require3 = require('./utils'),
      sanitize = _require3.sanitize,
      capitalize = _require3.capitalize;

function makeHot(id, code, asset) {
  const hotApiRequire = path.relative(path.dirname(asset.name), require.resolve('./hot-api')).replace(/\\/g, '/');
  const replacement = `
    if (module.hot) {
      const { configure, register, reload } = require('${hotApiRequire}');

      module.hot.accept();

      if (!module.hot.data) {
        // initial load
        configure({});
        $3 = register('${id}', $3);
      } else {
        // hot update
        $3 = reload('${id}', $3);
      }
    }

    module.exports = $3;
  `;
  return code.replace(/((module.exports =|export default) ([^;]*));/, replacement);
}

class SvelteAsset extends Asset {
  constructor(name, pkg, options) {
    super(name, pkg, options);
    this.type = 'js';
  }

  getConfig() {
    var _this = this,
        _superprop_callGetConfig = (..._args) => super.getConfig(..._args);

    return _asyncToGenerator(function* () {
      let config = (yield _superprop_callGetConfig(['.svelterc', 'svelte.config.js', 'package.json'])) || {};
      config = config.svelte || config;
      let defaultOptions = {
        generate: 'dom',
        css: true
      };
      let customCompilerOptions = config.compilerOptions || {};

      if (major_version >= 3) {
        defaultOptions.format = 'esm';
        defaultOptions.sveltePath = 'svelte';
      } else {
        defaultOptions.format = 'es';
        defaultOptions.store = true;
        defaultOptions.shared = 'svelte/shared.js';
      }

      let fixedCompilerOptions = {
        filename: _this.relativeName,
        // The name of the constructor. Required for 'iife' and 'umd' output,
        // but otherwise mostly useful for debugging. Defaults to 'SvelteComponent'
        name: capitalize(sanitize(_this.relativeName))
      };
      config.compilerOptions = Object.assign({}, defaultOptions, customCompilerOptions, fixedCompilerOptions);
      return config;
    })();
  }

  generate() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      let config = yield _this2.getConfig();
      let compilerOptions = config.compilerOptions;

      if (config.preprocess) {
        const preprocessed = yield preprocess(_this2.contents, config.preprocess);
        _this2.contents = preprocessed.toString();
      }

      let _compile = compile(_this2.contents, compilerOptions),
          css = _compile.css,
          js = _compile.js;

      let map = js.map,
          code = js.code;

      if (process.env.NODE_ENV !== 'production' && _this2.options.hmr) {
        code = makeHot(compilerOptions.filename, code, _this2);
      }

      css = css.code;

      if (_this2.options.sourceMaps) {
        map.sources = [_this2.relativeName];
        map.sourcesContent = [_this2.contents];
      }

      const parts = [{
        type: 'js',
        value: code,
        sourceMap: _this2.options.sourceMaps ? map : undefined
      }];

      if (css) {
        parts.push({
          type: 'css',
          value: css
        });
      }

      return parts;
    })();
  }

  postProcess(generated) {
    return _asyncToGenerator(function* () {
      // Hacky fix to remove duplicate JS asset (Css HMR code)
      const filteredArr = generated.filter(part => part.type !== 'js');
      return [generated[0]].concat(filteredArr);
    })();
  }

}

module.exports = SvelteAsset;